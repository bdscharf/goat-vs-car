[meta title:"The Monty Hall Problem" description:"Short description of your project" /]

[Header
  fullWidth:true
  title:"The Monty Hall Problem"
  subtitle:"An Explorable Explanation of the Classic Three Door Problem"
  author:"Remy Afong, Kevin Chan, and Ben Scharf"
  authorLink:"https://github.com/bdscharf/goat-vs-car"
  background:"#770808"
  color:"#ffffff"
   /]

## Introduction

The Monty Hall problem is a brain teaser based on the classic game show, *Let’s Make a Deal!*. It is named after the show’s original host, Monty Hall. In the game, there are three closed doors. Two of these doors have goats behind them, and one of them has a car behind it. If you pick the door behind the car correctly, you win! Halfway through the game, a door will be revealed to have a goat, and you will have an option to switch doors. After, the door with the car will be revealed and you will get to see if you chose wisely!   

[br/]

Try playing the game a few times, alternating between the stay and switch strategy. Look at your win percentages for both strategies. Notice anything interesting?

[var name:"game1Doors" value:3 /]
[var name:"stayWins" value:0 /]
[var name:"stayLosses" value:0 /]
[var name:"switchWins" value:0 /]
[var name:"switchLosses" value:0 /]
[derived name:"totalWins" value:`stayWins + switchWins` /]
[derived name:"totalLosses" value:`stayLosses + switchLosses` /]

[Game doorCount:game1Doors prizeCount:1 openCount:1 stayWinCount:stayWins stayLossCount:stayLosses switchWinCount:switchWins switchLossCount:switchLosses /]

[div className:"gamePies"]

[div className:"gamePie"]

Stay Wins: [Display value:stayWins format:".0f" /]
Stay Losses: [Display value:stayLosses format:".0f"/]

[ReactSimplePieChart
    slices:`[{
      color: '#770808',
      value: stayWins,
    }, {
      color: '#EAE7D6',
      value: stayLosses, },
    ]`
  /]

Stay Win Percentage: [Display value:`stayWins / (stayWins + stayLosses) * 100` /]%

[/div]

[div className:"gamePie"]

Switch Wins: [Display value:switchWins format:".0f"/]
Switch Losses: [Display value:switchLosses format:".0f"/]

[ReactSimplePieChart
    slices:`[{
      color: '#770808',
      value: switchWins,
    }, {
      color: '#EAE7D6',
      value: switchLosses, },
    ]`
  /]

Switch Win Percentage: [Display value:`switchWins / (switchWins + switchLosses) * 100` /]%

[/div]

[div className:"gamePie"]

Total Wins: [Display value:totalWins format:".0f"/]
Total Losses: [Display value:totalLosses format:".0f"/]

[ReactSimplePieChart
    slices:`[{
      color: '#770808',
      value: totalWins,
    }, {
      color: '#EAE7D6',
      value: totalLosses, },
    ]`
  /]

Total Win Percentage: [Display value:`totalWins / (totalWins + totalLosses) * 100` /]%

[/div]

[/div]

## Understanding the Paradox

[ProbabilityTree /]

[var name:"chooseText" value:"0" /]

Surprisingly, the **odds of winning the car aren't 50-50**. When the [action onClick:`chooseText = '1'`]game starts[/action], you choose 1 of 3 doors, and the odds of winning with your original choice is 1/3. Together, the other two doors have a combined 2/3 odds of holding the car. When Monty [action onClick:`chooseText = '2'`]opens one of those doors[/action], it doesn't change the odds. So now, the last door has the entire 2/3 odds of holding the car. Thus, if you choose to [action onClick:`chooseText = '3'`]stay with your original door[/action], you have a **1/3 chance of winning**. If you choose to [action onClick:`chooseText = '4'`]switch[/action], you have a **2/3 chance of winning**. 

[img src: `"static/images/" + chooseText + ".png"` /]

## Why Information Matters

You may be thinking that once there are only 2 doors left, the odds of winning must be 50-50. These choices would be equally likely if you knew nothing about either choice, but the key is that you do. Monty knows where the car is and won't choose to open the door with the car. Thus, by revealing a door with a goat, he's giving you more information. You're left with **a more informed choice rather than a random one**, making the probability of that last door having the car greater than a random 50-50. 

## Simulating More Trials

Still not convinced that the probability of winning is different if you stay with your original door or switch to another door? Run a simulation up to 5000 trials to see how the win percentage converges to 33% if you stay and 67% if you switch doors. 

[data name:"simdata" source:"simulation.csv" /]
[var name:"trialMax" value:5000 /]
[var name:"numTrials" value:0 /]

[Conditional if: `numTrials < trialMax`]
  [button onClick:`numTrials += 200`]Run 200 More Trials![/button]
[/Conditional]

[Conditional if: `numTrials >= trialMax`]
  [button onClick:`numTrials = 0`]Reset[/button]
[/Conditional]

[div]
Number of Trials Displayed in the Graph: 
[Display value:numTrials /]
[/div]

[div]
  [Inline]
    [WrapCSS divclass:"stayText" text:"Staying" /]
  [/Inline]
  [Inline]
    [WrapCSS divclass:"switchText" text:"Switching" /]
  [/Inline]
[/div]

[IdyllVegaLite data:`simdata.slice(0,numTrials)` spec:`{
  "title": "Switching vs. Staying Win Percentage",
  "width" : 600,
  "height": 400,
  "layer": [
  {
      mark: "line",
      encoding: {
        x: {
          field: "Trials",
          type: "quantitative",
          axis: {title: "Trials"}
        },
        y: {
          field: "Switch_Win_Percentage",
          type: "quantitative",
          axis: {title: "Win %"},
          scale: { domain: [0,100] }
        },
        "color": {"value": "#f44242"}
      }
  },
  {
    mark: "line",

    encoding: {
      x: {
        field: "Trials",
        type: "quantitative",
        axis: {title: "Trials"}
      },
      y: {
        field: "Stay_Win_Percentage",
        type: "quantitative",
        axis: {title: "Win %"},
        scale: { domain: [0,100] }
      },
      "color": {"value": "#006699"}
    }
  }]
}` /]


## Generalizing the Game

Traditionally, the game involves 3 doors and a single prize, but the problem can be generalized to any number of doors and prizes. Suppose there are [Equation]d[/Equation] doors, [Equation]p[/Equation] prizes, and Monty opens [Equation]x[/Equation] doors. Because Monty will never open the door you originally chose or open a door with a prize behind it, the number of doors he will open is constrained to

[Equation display:true]
  x \leq d-1-p
[/Equation]

Since there are [Equation]d[/Equation] doors and [Equation]p[/Equation] prizes, the probability that your initial choice will contain a prize is

[Equation display:true]
  p_i = \frac{p}{d}
[/Equation]

Considering the summation of all [Equation]d[/Equation] doors, the probability of winning is

[Equation display:true]
  \frac{p}{d} \times d = p
[/Equation]

As Monty opens doors without prizes, this sum [Equation]p[/Equation] must remain the same, since all of the probability of winning remains in the unopened doors. As explained, the original door you select has a probability [Equation]p_i[/Equation] of winning. The [Equation]d-1-x[/Equation] remaining doors must all have the same probability [Equation]p_r[/Equation]. Thus, this sum must be

[Equation display:true]
  p_i + p_r(d-1-x) = p
[/Equation]

[var name:"derivationText" value:false /]
[Display value:derivationText /]

Rearranging the equation (click [action onClick:`derivationText =!derivationText`]here[/action] to show/hide all of the steps), the probability of winning for one of the remaining doors [Equation]p_r[/Equation] is

[Conditional if: `!derivationText`]

[Equation display:true]
  p_r = p_i \times \frac{d-1}{d-1-x}
[/Equation]

[/Conditional]

[Conditional if: `derivationText`]

[Equation display:true]
  p_r = \frac {p-p_i}{d-1-x}
[/Equation]

[Equation display:true]
  p_r = \frac {p-p/d}{d-1-x} \times \frac{d}{d}
[/Equation]

[Equation display:true]
  p_r = \frac {pd-p}{d(d-1-x)} 
[/Equation]

[Equation display:true]
  p_r = \frac {p(d-1)}{d(d-1-x)} 
[/Equation]

[Equation display:true]
  p_r = \frac {p}{d} \times \frac{d-1}{d-1-x} 
[/Equation]

[Equation display:true]
  p_r = p_i \times \frac{d-1}{d-1-x} 
[/Equation]

[/Conditional]

Thus, if you switch doors, you will have a [Equation]p_r[/Equation] probability of winning, which is always greater than your original [Equation]p_i[/Equation] probability since 

[Equation display:true]
  \frac{d-1}{d-1-x} \geq 0
[/Equation]

for all values of [Equation]x[/Equation] and [Equation]d[/Equation]. Note that [Equation]d \geq x[/Equation] since [Equation]x \leq d-1-p[/Equation] as previously described.

This value also represents the benefit of switching, i.e. the factor by which switching increases your chance of winning. For the traditional Monty Hall problem, this factor is

[Equation display:true]
  \frac{3-1}{3-1-1} = 2
[/Equation]

and [Equation]p_i[/Equation] and [Equation]p_r[/Equation] are [Equation]1/3[/Equation] and [Equation]2/3[/Equation], respectively.

## Try It Out Yourself!

Input values for the number of doors [Equation]d[/Equation], the number of prizes [Equation]p[/Equation], and the number of doors Monty will open [Equation]x[/Equation]. See how the benefit of switching changes as you vary these values.

[var name:"d" value:3 /]
[var name:"p" value:1 /]
[var name:"x" value:1 /]

[div]
  [Inline]
    [Equation]d[/Equation]: [TextInput value:d /]
  [/Inline]
  [Inline]
    [Equation]p[/Equation]: [TextInput value:p /]
  [/Inline]
  [Inline]
    [Equation]x[/Equation]: [TextInput value:x /]
  [/Inline]
  [Inline]
    [button onClick: `p_i = p/d, s = (d-1)/(d-1-x), p_r = p_i*s`]Go[/button]
  [/Inline]
[/div]


[var name:"p_i" value:"" /]
[var name:"p_r" value:"" /]
[var name:"s" value:"" /]

[div]
  [Inline]
    [Equation]p_i[/Equation]: 
  [/Inline]
  [Inline]
    [Display value: p_i format:".4f"/]
  [/Inline]
[/div]

[div]
  [Inline]
    [Equation]p_r[/Equation]: 
  [/Inline]
  [Inline]
    [Display value: p_r format:".4f"/]
  [/Inline]
[/div]

[div]
  [Inline]
    switching enhancement: 
  [/Inline]
  [Inline]
      [Display value: s /] 
  [/Inline]
[/div]

[var name:"stay2Wins" value:0 /]
[var name:"stay2Losses" value:0 /]
[var name:"switch2Wins" value:0 /]
[var name:"switch2Losses" value:0 /]
[derived name:"totalWins2" value:`stay2Wins + switch2Wins` /]
[derived name:"totalLosses2" value:`stay2Losses + switch2Losses` /]

[Game doorCount:d prizeCount:p openCount:x stayWinCount:stay2Wins stayLossCount:stay2Losses switchWinCount:switch2Wins switchLossCount:switch2Losses smallDoor:true /]

[div className:"gamePies"]

[div className:"gamePie"]

Stay Wins: [Display value:stay2Wins format:".0f" /]
Stay Losses: [Display value:stay2Losses format:".0f"/]

[ReactSimplePieChart
    slices:`[{
      color: '#770808',
      value: stay2Wins,
    }, {
      color: '#EAE7D6',
      value: stay2Losses, },
    ]`
  /]

Stay Win Percentage: [Display value:`stay2Wins / (stay2Wins + stay2Losses) * 100` /]%

[/div]

[div className:"gamePie"]

Switch Wins: [Display value:switch2Wins format:".0f"/]
Switch Losses: [Display value:switch2Losses format:".0f"/]

[ReactSimplePieChart
    slices:`[{
      color: '#770808',
      value: switch2Wins,
    }, {
      color: '#EAE7D6',
      value: switch2Losses, },
    ]`
  /]

Switch Win Percentage: [Display value:`switch2Wins / (switch2Wins + switch2Losses) * 100` /]%

[/div]

[div className:"gamePie"]

Total Wins: [Display value:totalWins2 format:".0f"/]
Total Losses: [Display value:totalLosses2 format:".0f"/]

[ReactSimplePieChart
    slices:`[{
      color: '#770808',
      value: totalWins2,
    }, {
      color: '#EAE7D6',
      value: totalLosses2, },
    ]`
  /]

Total Win Percentage: [Display value:`totalWins2 / (totalWins2 + totalLosses2) * 100` /]%

[/div]

[/div]
[meta title:"The Monty Hall Problem" description:"Short description of your project" /]

[Header
  fullWidth:true
  title:"The Monty Hall Problem"
  subtitle:"An Explorable Explanation of the Classic Three Door Problem"
  author:"Remy Afong, Kevin Chan, and Ben Scharf"
  authorLink:"https://github.com/bdscharf/goat-vs-car"
  background:"#a51010"
  color:"#ffffff"
   /]

[FullWidth]

## Introduction
[div]
The Monty Hall problem is a [div className: "emphasize"]probability brain teaser[/div] based on the classic game show, *Let’s Make a Deal!*. It is named after the show’s original host, Monty Hall. In the game, there are three closed doors. Two of these doors have goats behind them, and one of them has a car behind it. If you pick the door behind the car correctly, you win! Halfway through the game, a door will be revealed to have a goat, and you will have an option to switch doors. After, the door with the car will be revealed and you will get to see if you chose wisely!   

[br/]

Try playing the game a few times, [div className: "emphasize"]alternating between the stay and switch strategy[/div]. Look at your win percentages for both strategies. Notice anything interesting?
[/div]
[div className:"demoBox"]

[var name:"game1Doors" value:3 /]
[var name:"stayWins" value:0 /]
[var name:"stayLosses" value:0 /]
[var name:"switchWins" value:0 /]
[var name:"switchLosses" value:0 /]
[derived name:"totalWins" value:`stayWins + switchWins` /]
[derived name:"totalLosses" value:`stayLosses + switchLosses` /]

[Game doorCount:game1Doors prizeCount:1 openCount:1 stayWinCount:stayWins stayLossCount:stayLosses switchWinCount:switchWins switchLossCount:switchLosses /]

[div className:"gamePies"]

[div className:"gamePie"]

Stay Wins: [Display value:stayWins format:".0f" /] [br/]
Stay Losses: [Display value:stayLosses format:".0f"/]

[ReactSimplePieChart
    slices:`[{
      color: '#a51010',
      value: stayWins,
    }, {
      color: '#EAE7D6',
      value: stayLosses, },
    ]`
  /]

Stay Win %: [Display value:`stayWins / (stayWins + stayLosses) * 100` /]%

[/div]

[div className:"gamePie"]

Switch Wins: [Display value:switchWins format:".0f"/] [br/]
Switch Losses: [Display value:switchLosses format:".0f"/]

[ReactSimplePieChart
    slices:`[{
      color: '#a51010',
      value: switchWins,
    }, {
      color: '#EAE7D6',
      value: switchLosses, },
    ]`
  /]

Switch Win %: [Display value:`switchWins / (switchWins + switchLosses) * 100` /]%

[/div]

[div className:"gamePie"]

Total Wins: [Display value:totalWins format:".0f"/] [br/]
Total Losses: [Display value:totalLosses format:".0f"/]

[ReactSimplePieChart
    slices:`[{
      color: '#a51010',
      value: totalWins,
    }, {
      color: '#EAE7D6',
      value: totalLosses, },
    ]`
  /]

Total Win %: [Display value:`totalWins / (totalWins + totalLosses) * 100` /]%

[/div]

[/div]

[/div]

[div className:"treeBox"]
[div className:"treeText"]
## Understanding the Paradox

Surprisingly, the [div className: "emphasize"]odds of winning the car aren't 50-50[/div]. Let's walk through the following scenario together to understand why. [div className: "emphasize"]Click on the nodes to follow along![/div]


[div className: "emphasize"]1. Suppose you choose Door 1.[/div]
Since there are 3 doors, each has an equal 1/3 probability of containing the car. 

[div className: "emphasize"]2. Location of the car.[/div] If the car is behind Door 1, Monty will open either Door 2 or Door 3 with an equal 1/2 probability since neither holds the car. If the car is behind Door 2, Monty will open Door 3 so as not to reveal the car. If the car is behind Door 3, Monty will open Door 2 so as not to reveal the car.

[div className: "emphasize"]3. Understanding path probability.[/div] To get the probability of a path, multiply the probabilities on that path. For example, suppose you follow the top path, i.e. you pick Door 1, the car is actually behind Door 1, Monty opens Door 2, and you decide to stay. The probability of this path is 
[Equation]\frac{1}{3}(\frac{1}{2}) = \frac{1}{6}[/Equation].

[div className: "emphasize"]4. Finally, let's analyze each strategy.[/div] (Make sure you've expanded all nodes first!)
[br/]
***Stay*** [br/]
Looking at all of the Stay paths, see how the total path probabilities leading to the Car and Goat differ.

Car: [Equation]\frac{1}{3}(\frac{1}{2}) + \frac{1}{3}(\frac{1}{2}) = \frac{1}{3}[/Equation] 

Goat: [Equation]\frac{1}{3}(1) + \frac{1}{3}(1) = \frac{2}{3}[/Equation] 

***Switch***

Now do the same for all of the Switch paths.

Car: [Equation]\frac{1}{3}(1) + \frac{1}{3}(1) = \frac{2}{3}[/Equation] 

Goat: [Equation]\frac{1}{3}(\frac{1}{2}) + \frac{1}{3}(\frac{1}{2}) = \frac{1}{3}[/Equation] 

As you can see, [div className: "emphasize"]switching doubles your chances[/div] of winning the car!

[/div]

[div className:"probTree"]
[ProbabilityTree /]
[/div]
[/div]

## Why Information Matters

[div]
You may be thinking that once there are only 2 doors left, the odds of winning must be 50-50. These choices would be equally likely if you knew nothing about either choice, but the key is that you do. Monty knows where the car is and won't choose to open the door with the car. Thus, by revealing a door with a goat, he's giving you more information. You're left with [div className: "emphasize"]a more informed choice rather than a random one[/div], making the probability of that last door having the car greater than a random 50-50. 
[/div]

## Simulating More Trials
[div className: "trialText"]
[div]
If you only played the game a few times, you may not see that staying gives you a 1/3 chance and switching gives you a 2/3 chance of winning. However, as you increase the number of trials, you will see that the win percentages do, indeed, **converge to 33.3% if you [div className: "stayText"]stay[/div] and 66.7% if you [div className: "switchText"]switch[/div]**. [br/]

[div className: "emphasize"]See for yourself by running the similulation below![/div] Note that running a single trial includes one trial of the stay strategy and one trial of the switch strategy.
[/div]
[/div]

[div className:"trialBox"]
[div className:"trialButtons"]

[data name:"simdata" source:"simulation.csv" /]
[var name:"trialMax" value:5000 /]
[var name:"numTrials" value:0 /]

[button onClick:`numTrials += 1`]Run 1 More Trial![/button]
[button onClick:`numTrials += 10`]Run 10 More Trials![/button]
[button onClick:`numTrials += 100`]Run 100 More Trials![/button]

[button onClick:`numTrials = 0`]Reset[/button]

[/div]

[IdyllVegaLite data:`simdata.slice(0,numTrials)` spec:`{
  "title": "Switching vs. Staying Win Percentage",
  "width" : 600,
  "height": 300,
  "layer": [
  {
      mark: "line",
      encoding: {
        x: {
          field: "Trials",
          type: "quantitative",
          axis: {title: "Trials"}
        },
        y: {
          field: "Switch_Win_Percentage",
          type: "quantitative",
          axis: {title: "Win %"},
          scale: { domain: [0,100] }
        },
        "color": {"value": "#f44242"}
      }
  },
  {
    mark: "line",

    encoding: {
      x: {
        field: "Trials",
        type: "quantitative",
        axis: {title: "Trials"}
      },
      y: {
        field: "Stay_Win_Percentage",
        type: "quantitative",
        axis: {title: "Win %"},
        scale: { domain: [0,100] }
      },
      "color": {"value": "#2099ea"}
    }
  }]
}` /]


[/div]

## Generalizing the Game

Understandably, you may still be skeptical about why switching doors can double your chances of winning. Let's go through a larger scenario to see why switching is always in your favor. Imagine that instead of 3 doors, there are 100 doors. There is still only 1 prize, but this time, Monty opens 98 doors.

In other words, you originally pick 1 door, which has a 1/100 chance of containing the car. Monty looks at the 99 other doors and opens 98 with goats. In essence, he is [div className: "emphasize"]filtering the other doors and leaving you with the best door out of the 99[/div]. 

So now, do stick with your random original door, or the door that was filtered out from 99 other doors? Hopefully you can see that [div className: "emphasize"]a filtered choice is better than a random one[/div]. Now let's see how much switching helps you, depending on the scenario.

## Implementing the Generalization

As described, the problem can be generalized to any number of doors and prizes. [div className: "emphasize"]Suppose there are [Equation]d[/Equation] doors, [Equation]p[/Equation] prizes, and Monty opens [Equation]x[/Equation] doors[/div]. Because Monty will never open the door you originally chose or open a door with a prize behind it, the number of doors he will open is constrained to

[Equation display:true]
  x \leq d-1-p
[/Equation]

Since there are [Equation]d[/Equation] doors and [Equation]p[/Equation] prizes, the [div className: "emphasize"]probability that your initial choice will contain a prize[/div] is

[Equation display:true]
  p_i = \frac{p}{d}
[/Equation]

Considering the summation of all [Equation]d[/Equation] doors, the [div className: "emphasize"]probability of winning[/div] is

[Equation display:true]
  \frac{p}{d} \times d = p
[/Equation]

As Monty opens doors without prizes, this sum [Equation]p[/Equation] must remain the same, since [div className: "emphasize"]all of the probability of winning remains in the unopened doors[/div]. As explained, the original door you select has a probability [Equation]p_i[/Equation] of winning. The [Equation]d-1-x[/Equation] remaining doors must all have the same probability [Equation]p_r[/Equation]. Thus, this sum must be

[Equation display:true]
  p_i + p_r(d-1-x) = p
[/Equation]

[var name:"derivationText" value:false /]
[Display value:derivationText /]

Rearranging the equation (click [action onClick:`derivationText =!derivationText`]here[/action] to show/hide all of the steps), the [div className: "emphasize"]probability of winning for one of the remaining doors [Equation]p_r[/Equation][/div] is
[div]
[Conditional if: `!derivationText`]

[Equation display:true]
  p_r = p_i \times \frac{d-1}{d-1-x}
[/Equation]

[/Conditional]

[Conditional if: `derivationText`]

[Equation display:true]
  p_r = \frac {p-p_i}{d-1-x}
[/Equation]

[Equation display:true]
  p_r = \frac {p-p/d}{d-1-x} \times \frac{d}{d}
[/Equation]

[Equation display:true]
  p_r = \frac {pd-p}{d(d-1-x)} 
[/Equation]

[Equation display:true]
  p_r = \frac {p(d-1)}{d(d-1-x)} 
[/Equation]

[Equation display:true]
  p_r = \frac {p}{d} \times \frac{d-1}{d-1-x} 
[/Equation]

[Equation display:true]
  p_r = p_i \times \frac{d-1}{d-1-x} 
[/Equation]

[/Conditional]
[/div]

Thus, if you switch doors, you will have a [Equation]p_r[/Equation] probability of winning, which is [div className: "emphasize"]always greater than your original [Equation]p_i[/Equation] probability[/div] since 

[Equation display:true]
  \frac{d-1}{d-1-x} \geq 0
[/Equation]

for all values of [Equation]x[/Equation] and [Equation]d[/Equation]. Note that [Equation]d \geq x[/Equation] since [Equation]x \leq d-1-p[/Equation] as previously described.

This value also represents the [div className: "emphasize"]benefit of switching[/div], i.e. the factor by which switching increases your chance of winning. For the traditional Monty Hall problem, this factor is

[Equation display:true]
  \frac{3-1}{3-1-1} = 2
[/Equation]

and [Equation]p_i[/Equation] and [Equation]p_r[/Equation] are [Equation]1/3[/Equation] and [Equation]2/3[/Equation], respectively.

## Try It Out Yourself!

Input values for the number of doors [Equation]d[/Equation], the number of prizes [Equation]p[/Equation], and the number of doors Monty will open [Equation]x[/Equation]. [div className: "emphasize"]See how the benefit of switching changes as you vary these values, then play the game![/div]

[var name:"d" value:3 /]
[var name:"p" value:1 /]
[var name:"x" value:1 /]


[div]
  [Inline]
    [Equation]d[/Equation]: [TextInput value:d /]
  [/Inline]
  [Inline]
    [Equation]p[/Equation]: [TextInput value:p /]
  [/Inline]
  [Inline]
    [Equation]x[/Equation]: [TextInput value:x /]
  [/Inline]
[/div]


[derived name:"p_i" value:`p/d` /]
[derived name:"s" value:`(d-1)/(d-1-x)` /]
[derived name:"p_r" value:`p_i*s` /]
[div]
[div className: "probs"]
[div]
  [Inline]
    **Stay Win Probability** ( 
  [/Inline]
  [Inline]
    [Equation]p_i[/Equation]): 
  [/Inline]
  [Inline]
    [Display value: p_i format:".4f"/]
  [/Inline]
[/div]

[div]
  [Inline]
    **Switch Win Probability** ( 
  [/Inline]
  [Inline]
    [Equation]p_r[/Equation]): 
  [/Inline]
  [Inline]
    [Display value: p_r format:".4f"/]
  [/Inline]
[/div]

[div]
  [Inline]
    **Benefit of Switching Multiplier**: 
  [/Inline]
  [Inline]
      [Display value: s /] 
  [/Inline]
[/div]
[/div]
[/div]

[button onClick:`stay2Wins = 0; stay2Losses = 0; switch2Wins = 0; switch2Losses = 0`]Reset Win Percentages[/button]

[br/]

[var name:"stay2Wins" value:0 /]
[var name:"stay2Losses" value:0 /]
[var name:"switch2Wins" value:0 /]
[var name:"switch2Losses" value:0 /]
[derived name:"totalWins2" value:`stay2Wins + switch2Wins` /]
[derived name:"totalLosses2" value:`stay2Losses + switch2Losses` /]

[Game doorCount:d prizeCount:p openCount:x stayWinCount:stay2Wins stayLossCount:stay2Losses switchWinCount:switch2Wins switchLossCount:switch2Losses smallDoor:true /]

[div className: "pieWrap"]
[div className:"gamePies"]

[div className:"gamePie"]

Stay Wins: [Display value:stay2Wins format:".0f" /]
Stay Losses: [Display value:stay2Losses format:".0f"/]

[ReactSimplePieChart
    slices:`[{
      color: '#a51010',
      value: stay2Wins,
    }, {
      color: '#EAE7D6',
      value: stay2Losses, },
    ]`
  /]

Stay Win %: [Display value:`stay2Wins / (stay2Wins + stay2Losses) * 100` /]%

[/div]

[div className:"gamePie"]

Switch Wins: [Display value:switch2Wins format:".0f"/]
Switch Losses: [Display value:switch2Losses format:".0f"/]

[ReactSimplePieChart
    slices:`[{
      color: '#a51010',
      value: switch2Wins,
    }, {
      color: '#EAE7D6',
      value: switch2Losses, },
    ]`
  /]

Switch Win %: [Display value:`switch2Wins / (switch2Wins + switch2Losses) * 100` /]%

[/div]

[div className:"gamePie"]

Total Wins: [Display value:totalWins2 format:".0f"/]
Total Losses: [Display value:totalLosses2 format:".0f"/]

[ReactSimplePieChart
    slices:`[{
      color: '#a51010',
      value: totalWins2,
    }, {
      color: '#EAE7D6',
      value: totalLosses2, },
    ]`
  /]

Total Win %: [Display value:`totalWins2 / (totalWins2 + totalLosses2) * 100` /]%

[/div]

[/div]

[/div]

[/FullWidth]